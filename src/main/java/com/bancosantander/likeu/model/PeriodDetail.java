/*
 * Credits
 * The Credits API provides information about customer credit lines.
 *
 * OpenAPI spec version: 2.2.0
 * Contact: gipinacho@santander.com.mx
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.bancosantander.likeu.model;
import java.util.List;
/**
 * Retrieves the period basic information
 */

public class PeriodDetail {
 
  private Integer periodId = null;

  
  private java.util.Date initialDate = null;

  
  private java.util.Date dueDate = null;

  private AllOfPeriodDetailAccumulatedPurchases accumulatedPurchases = null;

  private List<PaymentDetail> cardPayment = null;

  private List<RecurrentPaymentDetail> recurrentPayment = null;

  private List<DomiciliationDetail> domiciliation = null;

  private List<AssistanceDetail> assistance = null;

  private List<PayrollDetail> payrollPortability = null;

  private List<DigitalChannelDetail> digitalChannels = null;

  /**
   * Indicates the status of the period.   * &#x60;ONGOING&#x60; -  Indicates that status for period is in progress.   * &#x60;FINISH&#x60; - Indicates that the period has ended. 
   */
      /**
 * Adds 10 to the age
 * @param input - The age to add 10 to
 * @returns {value} - The age + 10
 **/
  public enum StatusEnum {
    /**
	 * @param String
   * @param String
	 */
    ONGOING("ONGOING"),
    FINISH("FINISH");

    private String value;
/**
	 * @param String
	 */
    StatusEnum(String value) {
      this.value = value;
    }

/**
   * Indicates the key contract for the benefit
   * @return value
  **/    
    public String getValue() {
      return value;
    }

  }  
     /**
   * Period identifier of benefit 
   * @return periodId
  **/
  public Integer getPeriodId() {
    return periodId;
  }
/**
	 * @param Integer
	 */
  public void setPeriodId(Integer periodId) {
    this.periodId = periodId;
  }

   /**
   * This date specifies the initial date for the period of benefit [ISO 8601] (https://www.iso.org/iso-8601-date-and-time-format.html
   * @return initialDate
  **/
  public java.util.Date getInitialDate() {
    if (this.initialDate != null) {
      return new java.util.Date(this.initialDate.getTime());
    } else {
      return null;
    }
  }
/**
	 * @param Date
	 */
  public void setInitialDate(java.util.Date initialDate) {
    if (initialDate != null) {
      this.initialDate = new java.util.Date(initialDate.getTime());
    } else {
        this.initialDate = null;
    }
  }

   /**
   * This date specifies the last day for the period to benefit. [ISO 8601] (https://www.iso.org/iso-8601-date-and-time-format.html
   * @return dueDate
  **/
  public java.util.Date getDueDate() {
    if (this.dueDate != null) {
      return new java.util.Date(this.dueDate.getTime());
    } else {
      return null;
    }
  }
/**
	 * @param Date
	 */
  public void setDueDate(java.util.Date dueDate) {
    if (dueDate != null) {
      this.dueDate = new java.util.Date(dueDate.getTime());
    } else {
        this.dueDate = null;
    }
  }

   /**
   * Accumulated amount purchases
   * @return accumulatedPurchases
  **/
  public AllOfPeriodDetailAccumulatedPurchases getAccumulatedPurchases() {
    return accumulatedPurchases;
  }
/**
	 * @param AllOfPeriodDetailAccumulatedPurchases
	 */
  public void setAccumulatedPurchases(AllOfPeriodDetailAccumulatedPurchases accumulatedPurchases) {
    this.accumulatedPurchases = accumulatedPurchases;
  }

   /**
   * Indicate the payment card detail.
   * @return cardPayment
  **/
  public List<PaymentDetail> getCardPayment() {
    return cardPayment;
  }
/**
	 * @param List<PaymentDetail>
	 */
  public void setCardPayment(List<PaymentDetail> cardPayment) {
    this.cardPayment = cardPayment;
  }

   /**
   * Indicates the card recurrent payment detail.
   * @return recurrentPayment
  **/
  public List<RecurrentPaymentDetail> getRecurrentPayment() {
    return recurrentPayment;
  }
/**
	 * @param List<RecurrentPaymentDetail>
	 */
  public void setRecurrentPayment(List<RecurrentPaymentDetail> recurrentPayment) {
    this.recurrentPayment = recurrentPayment;
  }

   /**
   * Indicate the status for domiciliation
   * @return domiciliation
  **/
  public List<DomiciliationDetail> getDomiciliation() {
    return domiciliation;
  }
/**
	 * @param List<DomiciliationDetail>
	 */
  public void setDomiciliation(List<DomiciliationDetail> domiciliation) {
    this.domiciliation = domiciliation;
  }

   /**
   * Indicate the status for assistance
   * @return assistance
  **/
  public List<AssistanceDetail> getAssistance() {
    return assistance;
  }
/**
	 * @param List<AssistanceDetail>
	 */
  public void setAssistance(List<AssistanceDetail> assistance) {
    this.assistance = assistance;
  }

   /**
   * Displays the customer&#x27;s payroll portability information.
   * @return payrollPortability
  **/
  public List<PayrollDetail> getPayrollPortability() {
    return payrollPortability;
  }
 /**
	 * @param List<PayrollDetail>
	 */
  public void setPayrollPortability(List<PayrollDetail> payrollPortability) {
    this.payrollPortability = payrollPortability;
  }

   /**
   * Displays if the customer has used digital channels.
   * @return digitalChannels
  **/
  public List<DigitalChannelDetail> getDigitalChannels() {
    return digitalChannels;
  }
/**
	 * @param List<DigitalChannelDetail>
	 */
  public void setDigitalChannels(List<DigitalChannelDetail> digitalChannels) {
    this.digitalChannels = digitalChannels;
  }
}
